<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace KintsugiTax\SDK\Models\Components;


/**
 * TransactionEstimatePublicRequest - Public request model for tax estimation API documentation.
 *
 * This model excludes internal fields like enriched_fields that should not be exposed in API docs.
 */
class TransactionEstimatePublicRequest
{
    /**
     * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
     *
     * @var \DateTime $date
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('date')]
    public \DateTime $date;

    /**
     * Unique identifier of this transaction in the source system.
     *
     * @var string $externalId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_id')]
    public string $externalId;

    /**
     *
     * @var CurrencyEnum $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CurrencyEnum')]
    public CurrencyEnum $currency;

    /**
     * List of items involved in the transaction.
     *
     * @var array<TransactionItemEstimateBase> $transactionItems
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transaction_items')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\KintsugiTax\SDK\Models\Components\TransactionItemEstimateBase>')]
    public array $transactionItems;

    /**
     * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability.
     *
     * @var array<TransactionEstimatePublicRequestAddress> $addresses
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('addresses')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\KintsugiTax\SDK\Models\Components\TransactionEstimatePublicRequestAddress>')]
    public array $addresses;

    /**
     * Total amount of the transaction.
     *
     * @var float|string|null $totalAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('total_amount')]
    #[\Speakeasy\Serializer\Annotation\Type('float|string|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public float|string|null $totalAmount = null;

    /**
     * An optional description of the transaction.
     *
     * @var ?string $description
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $description = null;

    /**
     * While currently not used, it may be used in the future to determine taxability. The source of the transaction (e.g., OTHER).
     *
     * @var ?SourceEnum $source
     * @deprecated  field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('source')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\SourceEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?SourceEnum $source = null;

    /**
     * Indicates if the transaction involves a marketplace.
     *
     * @var ?bool $marketplace
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('marketplace')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $marketplace = null;

    /**
     * Details about the customer. If the customer is not found, it will be ignored.
     *
     * @var ?CustomerBasePublic $customer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CustomerBasePublic|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CustomerBasePublic $customer = null;

    /**
     * @param  \DateTime  $date
     * @param  string  $externalId
     * @param  CurrencyEnum  $currency
     * @param  array<TransactionItemEstimateBase>  $transactionItems
     * @param  array<TransactionEstimatePublicRequestAddress>  $addresses
     * @param  float|string|null  $totalAmount
     * @param  ?string  $description
     * @param  ?SourceEnum  $source
     * @param  ?bool  $marketplace
     * @param  ?CustomerBasePublic  $customer
     * @phpstan-pure
     */
    public function __construct(\DateTime $date, string $externalId, CurrencyEnum $currency, array $transactionItems, array $addresses, float|string|null $totalAmount = null, ?string $description = null, ?SourceEnum $source = null, ?bool $marketplace = null, ?CustomerBasePublic $customer = null)
    {
        $this->date = $date;
        $this->externalId = $externalId;
        $this->currency = $currency;
        $this->transactionItems = $transactionItems;
        $this->addresses = $addresses;
        $this->totalAmount = $totalAmount;
        $this->description = $description;
        $this->source = $source;
        $this->marketplace = $marketplace;
        $this->customer = $customer;
    }
}