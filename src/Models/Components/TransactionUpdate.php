<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace KintsugiTax\SDK\Models\Components;


class TransactionUpdate
{
    /**
     * Unique identifier of the organization.
     *
     * @var string $organizationId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('organization_id')]
    public string $organizationId;

    /**
     * External identifier of the transaction.
     *
     * @var string $externalId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_id')]
    public string $externalId;

    /**
     * Transaction date and time
     *
     * @var \DateTime $date
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('date')]
    public \DateTime $date;

    /**
     * $addresses
     *
     * @var array<TransactionAddressBuilder> $addresses
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('addresses')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\KintsugiTax\SDK\Models\Components\TransactionAddressBuilder>')]
    public array $addresses;

    /**
     * $transactionItems
     *
     * @var array<TransactionItemCreateUpdate> $transactionItems
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transaction_items')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\KintsugiTax\SDK\Models\Components\TransactionItemCreateUpdate>')]
    public array $transactionItems;

    /**
     *
     * @var CustomerUpdate $customer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CustomerUpdate')]
    public CustomerUpdate $customer;

    /**
     *
     * @var ?ExemptionRequired $requiresExemption
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('requires_exemption')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\ExemptionRequired|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?ExemptionRequired $requiresExemption = null;

    /**
     * Transaction date in the shop's local timezone
     *
     * @var ?string $shopDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('shop_date')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $shopDate = null;

    /**
     * Timezone of the shop
     *
     * @var ?string $shopDateTz
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('shop_date_tz')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $shopDateTz = null;

    /**
     *
     * @var ?TransactionStatusEnum $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\TransactionStatusEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionStatusEnum $status = null;

    /**
     * Description of the transaction.
     *
     * @var ?string $description
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $description = null;

    /**
     * Shopify has 2 order statuses for refund case: refunded and partially_refunded
     *
     * If the given order has different status from these 2, we will set the
     * transaction's refund_status to PARTIALLY_REFUNDED by default.
     *
     * @var ?TransactionRefundStatus $refundStatus
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('refund_status')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\TransactionRefundStatus|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionRefundStatus $refundStatus = null;

    /**
     * Unique identifier of the customer.
     *
     * @var ?string $customerId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerId = null;

    /**
     * Based on transaction item exempt status.
     *
     * NOT EXEMPT: None of the items are NOT EXEMPT
     * PARTIALLY EXEMPT: At least some of the items are NOT EXEMPT
     * FULLY_EXEMPT: All items sold in the transaction are EXEMPT
     *
     * @var ?TransactionExemptStatusEnum $exempt
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('exempt')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\TransactionExemptStatusEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TransactionExemptStatusEnum $exempt = null;

    /**
     * List of exemptions applied (if any).
     *
     * @var ?array<Exemption> $exemptions
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('exemptions')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\KintsugiTax\SDK\Models\Components\Exemption>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $exemptions = null;

    /**
     * Related transaction identifier.
     *
     * @var ?string $relatedTo
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('related_to')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $relatedTo = null;

    /**
     * Secondary External Identifier.
     *
     * @var ?string $secondaryExternalId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('secondary_external_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $secondaryExternalId = null;

    /**
     * Secondary source information
     *
     * @var ?string $secondarySource
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('secondary_source')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $secondarySource = null;

    /**
     * Friendly identifier of the original item.
     *
     * @var ?string $externalFriendlyId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_friendly_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $externalFriendlyId = null;

    /**
     *
     * @var ?TaxLiabilitySourceEnum $taxLiabilitySource
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_liability_source')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\TaxLiabilitySourceEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?TaxLiabilitySourceEnum $taxLiabilitySource = null;

    /**
     *
     * @var ?CurrencyEnum $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CurrencyEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CurrencyEnum $currency = null;

    /**
     *
     * @var ?SourceEnum $source
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('source')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\SourceEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?SourceEnum $source = null;

    /**
     * Connection Identifier
     *
     * @var ?string $connectionId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('connection_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $connectionId = null;

    /**
     * Filing identifier.
     *
     * @var ?string $filingId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('filing_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $filingId = null;

    /**
     * City of the transaction address.
     *
     * @var ?string $city
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('city')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $city = null;

    /**
     * County of the transaction address.
     *
     * @var ?string $county
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('county')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $county = null;

    /**
     * State of the transaction address.
     *
     * @var ?string $state
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('state')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $state = null;

    /**
     *
     * @var ?CountryCodeEnum $country
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('country')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CountryCodeEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CountryCodeEnum $country = null;

    /**
     * Postal code of the transaction.
     *
     * @var ?string $postalCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('postal_code')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $postalCode = null;

    /**
     * Tax ID associated with the transaction
     *
     * @var ?string $taxId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $taxId = null;

    /**
     *
     * @var ?AddressStatus $addressStatus
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('address_status')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\AddressStatus|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?AddressStatus $addressStatus = null;

    /**
     * Our transaction state, used to determine when/if a transaction needs additional
     *
     * processing.
     *
     * @var ?ProcessingStatusEnum $processingStatus
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('processing_status')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\ProcessingStatusEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?ProcessingStatusEnum $processingStatus = null;

    /**
     *
     * @var ?CurrencyEnum $destinationCurrency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('destination_currency')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CurrencyEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CurrencyEnum $destinationCurrency = null;

    /**
     * Converted total amount.
     *
     * @var ?float $convertedTotalAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('converted_total_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $convertedTotalAmount = null;

    /**
     * Converted imported tax amount.
     *
     * @var ?float $convertedTotalTaxAmountImported
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('converted_total_tax_amount_imported')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $convertedTotalTaxAmountImported = null;

    /**
     * Converted calculated tax amount.
     *
     * @var ?float $convertedTotalTaxAmountCalculated
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('converted_total_tax_amount_calculated')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $convertedTotalTaxAmountCalculated = null;

    /**
     * Currency conversion rate.
     *
     * @var ?float $conversionRate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('conversion_rate')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $conversionRate = null;

    /**
     * Converted taxable amount.
     *
     * @var ?float $convertedTaxableAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('converted_taxable_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $convertedTaxableAmount = null;

    /**
     * Converted total discount amount.
     *
     * @var ?float $convertedTotalDiscount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('converted_total_discount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $convertedTotalDiscount = null;

    /**
     * Converted subtotal amount.
     *
     * @var ?float $convertedSubtotal
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('converted_subtotal')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $convertedSubtotal = null;

    /**
     * Converted total tax liability amount.
     *
     * @var ?float $convertedTotalTaxLiabilityAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('converted_total_tax_liability_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $convertedTotalTaxLiabilityAmount = null;

    /**
     * Total amount of the transaction.
     *
     * @var ?float $totalAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('total_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $totalAmount = null;

    /**
     * Indicates if transaction is marketplace-based.
     *
     * @var ?bool $marketplace
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('marketplace')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $marketplace = null;

    /**
     * Imported tax amount.
     *
     * @var ?float $totalTaxAmountImported
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('total_tax_amount_imported')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $totalTaxAmountImported = null;

    /**
     * Imported tax rate.
     *
     * @var ?float $taxRateImported
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_rate_imported')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $taxRateImported = null;

    /**
     * Calculated tax amount.
     *
     * @var ?float $totalTaxAmountCalculated
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('total_tax_amount_calculated')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $totalTaxAmountCalculated = null;

    /**
     * Calculated tax rate.
     *
     * @var ?float $taxRateCalculated
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_rate_calculated')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $taxRateCalculated = null;

    /**
     * Total tax liability amount.
     *
     * @var ?float $totalTaxLiabilityAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('total_tax_liability_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $totalTaxLiabilityAmount = null;

    /**
     * Taxable amount.
     *
     * @var ?float $taxableAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('taxable_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $taxableAmount = null;

    /**
     * Transaction lock status.
     *
     * @var ?bool $locked
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('locked')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $locked = null;

    /**
     * @param  string  $organizationId
     * @param  string  $externalId
     * @param  \DateTime  $date
     * @param  array<TransactionAddressBuilder>  $addresses
     * @param  array<TransactionItemCreateUpdate>  $transactionItems
     * @param  CustomerUpdate  $customer
     * @param  ?ExemptionRequired  $requiresExemption
     * @param  ?string  $shopDate
     * @param  ?string  $shopDateTz
     * @param  ?TransactionStatusEnum  $status
     * @param  ?string  $description
     * @param  ?TransactionRefundStatus  $refundStatus
     * @param  ?float  $totalAmount
     * @param  ?string  $customerId
     * @param  ?bool  $marketplace
     * @param  ?TransactionExemptStatusEnum  $exempt
     * @param  ?array<Exemption>  $exemptions
     * @param  ?string  $relatedTo
     * @param  ?string  $secondaryExternalId
     * @param  ?string  $secondarySource
     * @param  ?string  $externalFriendlyId
     * @param  ?float  $totalTaxAmountImported
     * @param  ?float  $taxRateImported
     * @param  ?float  $totalTaxAmountCalculated
     * @param  ?float  $taxRateCalculated
     * @param  ?float  $totalTaxLiabilityAmount
     * @param  ?TaxLiabilitySourceEnum  $taxLiabilitySource
     * @param  ?float  $taxableAmount
     * @param  ?CurrencyEnum  $currency
     * @param  ?bool  $locked
     * @param  ?SourceEnum  $source
     * @param  ?string  $connectionId
     * @param  ?string  $filingId
     * @param  ?string  $city
     * @param  ?string  $county
     * @param  ?string  $state
     * @param  ?CountryCodeEnum  $country
     * @param  ?string  $postalCode
     * @param  ?string  $taxId
     * @param  ?AddressStatus  $addressStatus
     * @param  ?ProcessingStatusEnum  $processingStatus
     * @param  ?CurrencyEnum  $destinationCurrency
     * @param  ?float  $convertedTotalAmount
     * @param  ?float  $convertedTotalTaxAmountImported
     * @param  ?float  $convertedTotalTaxAmountCalculated
     * @param  ?float  $conversionRate
     * @param  ?float  $convertedTaxableAmount
     * @param  ?float  $convertedTotalDiscount
     * @param  ?float  $convertedSubtotal
     * @param  ?float  $convertedTotalTaxLiabilityAmount
     * @phpstan-pure
     */
    public function __construct(string $organizationId, string $externalId, \DateTime $date, array $addresses, array $transactionItems, CustomerUpdate $customer, ?ExemptionRequired $requiresExemption = null, ?string $shopDate = null, ?string $shopDateTz = null, ?TransactionStatusEnum $status = null, ?string $description = null, ?TransactionRefundStatus $refundStatus = null, ?string $customerId = null, ?TransactionExemptStatusEnum $exempt = null, ?array $exemptions = null, ?string $relatedTo = null, ?string $secondaryExternalId = null, ?string $secondarySource = null, ?string $externalFriendlyId = null, ?TaxLiabilitySourceEnum $taxLiabilitySource = null, ?CurrencyEnum $currency = null, ?SourceEnum $source = null, ?string $connectionId = null, ?string $filingId = null, ?string $city = null, ?string $county = null, ?string $state = null, ?CountryCodeEnum $country = null, ?string $postalCode = null, ?string $taxId = null, ?AddressStatus $addressStatus = null, ?ProcessingStatusEnum $processingStatus = null, ?CurrencyEnum $destinationCurrency = null, ?float $convertedTotalAmount = null, ?float $convertedTotalTaxAmountImported = null, ?float $convertedTotalTaxAmountCalculated = null, ?float $conversionRate = null, ?float $convertedTaxableAmount = null, ?float $convertedTotalDiscount = null, ?float $convertedSubtotal = null, ?float $convertedTotalTaxLiabilityAmount = null, ?float $totalAmount = 0.00, ?bool $marketplace = false, ?float $totalTaxAmountImported = 0.00, ?float $taxRateImported = 0.00, ?float $totalTaxAmountCalculated = 0.00, ?float $taxRateCalculated = 0.00, ?float $totalTaxLiabilityAmount = 0.00, ?float $taxableAmount = 0.00, ?bool $locked = false)
    {
        $this->organizationId = $organizationId;
        $this->externalId = $externalId;
        $this->date = $date;
        $this->addresses = $addresses;
        $this->transactionItems = $transactionItems;
        $this->customer = $customer;
        $this->requiresExemption = $requiresExemption;
        $this->shopDate = $shopDate;
        $this->shopDateTz = $shopDateTz;
        $this->status = $status;
        $this->description = $description;
        $this->refundStatus = $refundStatus;
        $this->customerId = $customerId;
        $this->exempt = $exempt;
        $this->exemptions = $exemptions;
        $this->relatedTo = $relatedTo;
        $this->secondaryExternalId = $secondaryExternalId;
        $this->secondarySource = $secondarySource;
        $this->externalFriendlyId = $externalFriendlyId;
        $this->taxLiabilitySource = $taxLiabilitySource;
        $this->currency = $currency;
        $this->source = $source;
        $this->connectionId = $connectionId;
        $this->filingId = $filingId;
        $this->city = $city;
        $this->county = $county;
        $this->state = $state;
        $this->country = $country;
        $this->postalCode = $postalCode;
        $this->taxId = $taxId;
        $this->addressStatus = $addressStatus;
        $this->processingStatus = $processingStatus;
        $this->destinationCurrency = $destinationCurrency;
        $this->convertedTotalAmount = $convertedTotalAmount;
        $this->convertedTotalTaxAmountImported = $convertedTotalTaxAmountImported;
        $this->convertedTotalTaxAmountCalculated = $convertedTotalTaxAmountCalculated;
        $this->conversionRate = $conversionRate;
        $this->convertedTaxableAmount = $convertedTaxableAmount;
        $this->convertedTotalDiscount = $convertedTotalDiscount;
        $this->convertedSubtotal = $convertedSubtotal;
        $this->convertedTotalTaxLiabilityAmount = $convertedTotalTaxLiabilityAmount;
        $this->totalAmount = $totalAmount;
        $this->marketplace = $marketplace;
        $this->totalTaxAmountImported = $totalTaxAmountImported;
        $this->taxRateImported = $taxRateImported;
        $this->totalTaxAmountCalculated = $totalTaxAmountCalculated;
        $this->taxRateCalculated = $taxRateCalculated;
        $this->totalTaxLiabilityAmount = $totalTaxLiabilityAmount;
        $this->taxableAmount = $taxableAmount;
        $this->locked = $locked;
    }
}