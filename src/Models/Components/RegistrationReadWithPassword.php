<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace KintsugiTax\SDK\Models\Components;


class RegistrationReadWithPassword
{
    /**
     *
     * @var RegistrationStatusEnum $status
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('status')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\RegistrationStatusEnum')]
    public RegistrationStatusEnum $status;

    /**
     *
     * @var CountryCodeEnum $countryCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('country_code')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CountryCodeEnum')]
    public CountryCodeEnum $countryCode;

    /**
     * The state/province code where the registration applies.
     *
     * @var string $stateCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('state_code')]
    public string $stateCode;

    /**
     * The name of the state/province.
     *
     * @var string $stateName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('state_name')]
    public string $stateName;

    /**
     *
     * @var FilingFrequencyEnum $filingFrequency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('filing_frequency')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\FilingFrequencyEnum')]
    public FilingFrequencyEnum $filingFrequency;

    /**
     * The number of days before the filing deadline.
     *
     * @var int $filingDays
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('filing_days')]
    public int $filingDays;

    /**
     * The unique identifier for the registration.
     *
     * @var string $id
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('id')]
    public string $id;

    /**
     *
     * @var RegistrationTypeEnum $registrationType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('registration_type')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\RegistrationTypeEnum')]
    public RegistrationTypeEnum $registrationType;

    /**
     * The date when the registration was created. Format: YYYY-MM-DD.
     *
     * @var ?string $registrationDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('registration_date')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $registrationDate = null;

    /**
     * Email address associated with the registration.
     *
     * @var ?string $registrationEmail
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('registration_email')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $registrationEmail = null;

    /**
     * A unique key assigned to the registration.
     *
     * @var ?string $registrationKey
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('registration_key')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $registrationKey = null;

    /**
     * A unique key assigned for deregistration.
     *
     * @var ?string $deregistrationKey
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('deregistration_key')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $deregistrationKey = null;

    /**
     * Timestamp when the registration was requested.
     *
     * @var ?string $registrationRequested
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('registration_requested')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $registrationRequested = null;

    /**
     * Timestamp when the registration was completed.
     *
     * @var ?string $registrationCompleted
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('registration_completed')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $registrationCompleted = null;

    /**
     * Timestamp when deregistration was requested.
     *
     * @var ?string $deregistrationRequested
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('deregistration_requested')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $deregistrationRequested = null;

    /**
     * Timestamp when the deregistration was completed.
     *
     * @var ?string $deregistrationCompleted
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('deregistration_completed')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $deregistrationCompleted = null;

    /**
     *
     * @var ?RegistrationsRegimeEnum $registrationsRegime
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('registrations_regime')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\RegistrationsRegimeEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?RegistrationsRegimeEnum $registrationsRegime = null;

    /**
     *
     * @var ?ChangeRegimeStatusEnum $changeRegimeStatus
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('change_regime_status')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\ChangeRegimeStatusEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?ChangeRegimeStatusEnum $changeRegimeStatus = null;

    /**
     * Indicates whether the  registration is marked as collecting in shopify
     *
     * @var ?bool $markedCollecting
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('marked_collecting')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $markedCollecting = null;

    /**
     * Username for accessing tax registration details.
     *
     * @var ?string $username
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('username')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $username = null;

    /**
     * Additional comments related to the registration.
     *
     * @var ?string $comment
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('comment')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $comment = null;

    /**
     * The date from which filings should be created.
     *
     *         should start (YYYY-MM-DD).
     *
     * @var ?string $createFilingsFrom
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('create_filings_from')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $createFilingsFrom = null;

    /**
     * Whether the registration was imported from another system.
     *
     * @var ?bool $imported
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('imported')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $imported = null;

    /**
     * The sales tax ID associated with the registration.
     *
     * @var ?string $salesTaxId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sales_tax_id')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $salesTaxId = null;

    /**
     * Type of OSS registration.
     *
     * @var ?OssTypeEnum $ossType
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('oss_type')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\OssTypeEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?OssTypeEnum $ossType = null;

    /**
     *
     * @var ?CountryCodeEnum $ossMemberStateOfIdentificationCode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('oss_member_state_of_identification_code')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CountryCodeEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CountryCodeEnum $ossMemberStateOfIdentificationCode = null;

    /**
     * The date when the registration was marked as collecting.
     *
     * @var ?string $markedCollectingDate
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('marked_collecting_date')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $markedCollectingDate = null;

    /**
     * Encrypted password for accessing the registration,
     *
     *         if applicable.
     *
     * @var ?string $passwordEncrypted
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('password_encrypted')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $passwordEncrypted = null;

    /**
     * Indicates whether the registration was completed automatically.
     *
     * @var ?bool $autoRegistered
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('auto_registered')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $autoRegistered = null;

    /**
     * Indicates whether third-party access is enabled for this registration.
     *
     * @var ?bool $thirdPartyEnabled
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('third_party_enabled')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $thirdPartyEnabled = null;

    /**
     * Indicates whether an initial synchronization should be performed.
     *
     * @var ?bool $initialSync
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('initial_sync')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $initialSync = null;

    /**
     * The amount of fees associated with the registration.
     *
     * @var ?string $amountFees
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount_fees')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $amountFees = null;

    /**
     * Indicates whether a Voluntary Disclosure Agreement (VDA) applies.
     *
     * @var ?bool $vda
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('vda')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $vda = null;

    /**
     * Indicates whether the registration is an SST Import.
     *
     * @var ?bool $sstImport
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('sst_import')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $sstImport = null;

    /**
     * Indicates whether the registration needs to be marked as collecting.
     *
     * @var ?bool $needsMarkAsCollecting
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('needs_mark_as_collecting')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $needsMarkAsCollecting = null;

    /**
     *
     * @var ?string $creditsTotalAvailable
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('credits_total_available')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $creditsTotalAvailable = null;

    /**
     * Indicates if all required credentials are present.
     *
     * @var ?bool $hasAllCredentials
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('has_all_credentials')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $hasAllCredentials = null;

    /**
     * @param  RegistrationStatusEnum  $status
     * @param  CountryCodeEnum  $countryCode
     * @param  string  $stateCode
     * @param  string  $stateName
     * @param  FilingFrequencyEnum  $filingFrequency
     * @param  int  $filingDays
     * @param  string  $id
     * @param  RegistrationTypeEnum  $registrationType
     * @param  ?string  $registrationDate
     * @param  ?string  $registrationEmail
     * @param  ?string  $registrationKey
     * @param  ?string  $deregistrationKey
     * @param  ?string  $registrationRequested
     * @param  ?string  $registrationCompleted
     * @param  ?string  $deregistrationRequested
     * @param  ?string  $deregistrationCompleted
     * @param  ?bool  $autoRegistered
     * @param  ?RegistrationsRegimeEnum  $registrationsRegime
     * @param  ?ChangeRegimeStatusEnum  $changeRegimeStatus
     * @param  ?bool  $thirdPartyEnabled
     * @param  ?bool  $markedCollecting
     * @param  ?string  $username
     * @param  ?string  $comment
     * @param  ?string  $createFilingsFrom
     * @param  ?bool  $initialSync
     * @param  ?string  $amountFees
     * @param  ?bool  $vda
     * @param  ?bool  $imported
     * @param  ?string  $salesTaxId
     * @param  ?bool  $sstImport
     * @param  ?OssTypeEnum  $ossType
     * @param  ?CountryCodeEnum  $ossMemberStateOfIdentificationCode
     * @param  ?string  $markedCollectingDate
     * @param  ?bool  $needsMarkAsCollecting
     * @param  ?string  $creditsTotalAvailable
     * @param  ?string  $passwordEncrypted
     * @param  ?bool  $hasAllCredentials
     * @phpstan-pure
     */
    public function __construct(RegistrationStatusEnum $status, CountryCodeEnum $countryCode, string $stateCode, string $stateName, FilingFrequencyEnum $filingFrequency, int $filingDays, string $id, RegistrationTypeEnum $registrationType, ?string $registrationDate = null, ?string $registrationEmail = null, ?string $registrationKey = null, ?string $deregistrationKey = null, ?string $registrationRequested = null, ?string $registrationCompleted = null, ?string $deregistrationRequested = null, ?string $deregistrationCompleted = null, ?RegistrationsRegimeEnum $registrationsRegime = null, ?ChangeRegimeStatusEnum $changeRegimeStatus = null, ?bool $markedCollecting = null, ?string $username = null, ?string $comment = null, ?string $createFilingsFrom = null, ?bool $imported = null, ?string $salesTaxId = null, ?OssTypeEnum $ossType = null, ?CountryCodeEnum $ossMemberStateOfIdentificationCode = null, ?string $markedCollectingDate = null, ?string $passwordEncrypted = null, ?bool $autoRegistered = false, ?bool $thirdPartyEnabled = false, ?bool $initialSync = false, ?string $amountFees = '0.00', ?bool $vda = false, ?bool $sstImport = false, ?bool $needsMarkAsCollecting = false, ?string $creditsTotalAvailable = '0.00', ?bool $hasAllCredentials = false)
    {
        $this->status = $status;
        $this->countryCode = $countryCode;
        $this->stateCode = $stateCode;
        $this->stateName = $stateName;
        $this->filingFrequency = $filingFrequency;
        $this->filingDays = $filingDays;
        $this->id = $id;
        $this->registrationType = $registrationType;
        $this->registrationDate = $registrationDate;
        $this->registrationEmail = $registrationEmail;
        $this->registrationKey = $registrationKey;
        $this->deregistrationKey = $deregistrationKey;
        $this->registrationRequested = $registrationRequested;
        $this->registrationCompleted = $registrationCompleted;
        $this->deregistrationRequested = $deregistrationRequested;
        $this->deregistrationCompleted = $deregistrationCompleted;
        $this->registrationsRegime = $registrationsRegime;
        $this->changeRegimeStatus = $changeRegimeStatus;
        $this->markedCollecting = $markedCollecting;
        $this->username = $username;
        $this->comment = $comment;
        $this->createFilingsFrom = $createFilingsFrom;
        $this->imported = $imported;
        $this->salesTaxId = $salesTaxId;
        $this->ossType = $ossType;
        $this->ossMemberStateOfIdentificationCode = $ossMemberStateOfIdentificationCode;
        $this->markedCollectingDate = $markedCollectingDate;
        $this->passwordEncrypted = $passwordEncrypted;
        $this->autoRegistered = $autoRegistered;
        $this->thirdPartyEnabled = $thirdPartyEnabled;
        $this->initialSync = $initialSync;
        $this->amountFees = $amountFees;
        $this->vda = $vda;
        $this->sstImport = $sstImport;
        $this->needsMarkAsCollecting = $needsMarkAsCollecting;
        $this->creditsTotalAvailable = $creditsTotalAvailable;
        $this->hasAllCredentials = $hasAllCredentials;
    }
}