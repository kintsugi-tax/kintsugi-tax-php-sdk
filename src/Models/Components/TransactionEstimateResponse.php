<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace KintsugiTax\SDK\Models\Components;


class TransactionEstimateResponse
{
    /**
     * The date of the transaction in ISO 8601 format (e.g., 2025-01-25T12:00:00Z).
     *
     * @var \DateTime $date
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('date')]
    public \DateTime $date;

    /**
     * Unique identifier of this transaction in the source system.
     *
     * @var string $externalId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('external_id')]
    public string $externalId;

    /**
     *
     * @var CurrencyEnum $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CurrencyEnum')]
    public CurrencyEnum $currency;

    /**
     * $transactionItems
     *
     * @var array<TransactionItemEstimateResponse> $transactionItems
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('transaction_items')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\KintsugiTax\SDK\Models\Components\TransactionItemEstimateResponse>')]
    public array $transactionItems;

    /**
     * List of addresses related to the transaction. At least one BILL_TO or SHIP_TO address must be provided. The address will be validated during estimation, and the transaction may be rejected if the address does not pass validation. The SHIP_TO will be preferred to use for determining tax liability. **Deprecated:** Use of `address.status` in estimate api is ignored and will be removed in the future status will be considered UNVERIFIED by default and always validated
     *
     * @var array<TransactionEstimateResponseAddress> $addresses
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('addresses')]
    #[\Speakeasy\Serializer\Annotation\Type('array<\KintsugiTax\SDK\Models\Components\TransactionEstimateResponseAddress>')]
    public array $addresses;

    /**
     * An optional description of the transaction.
     *
     * @var ?string $description
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('description')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $description = null;

    /**
     *
     * @var ?SourceEnum $source
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('source')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\SourceEnum|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?SourceEnum $source = null;

    /**
     *
     * @var ?CustomerBase $customer
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customer')]
    #[\Speakeasy\Serializer\Annotation\Type('\KintsugiTax\SDK\Models\Components\CustomerBase|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?CustomerBase $customer = null;

    /**
     * Total amount of the transaction.
     *
     * @var ?string $totalAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('total_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $totalAmount = null;

    /**
     * Indicates if the transaction involves a marketplace.
     *
     * @var ?bool $marketplace
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('marketplace')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $marketplace = null;

    /**
     * The total amount of tax determined for the transaction.
     *
     * @var ?string $totalTaxAmountCalculated
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('total_tax_amount_calculated')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $totalTaxAmountCalculated = null;

    /**
     * The taxable amount for the transaction.
     *
     * @var ?string $taxableAmount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('taxable_amount')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $taxableAmount = null;

    /**
     * The calculated tax rate for the transaction.
     *
     * @var ?string $taxRateCalculated
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('tax_rate_calculated')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $taxRateCalculated = null;

    /**
     * Indicates if nexus was met for the transaction.**Deprecated:** Use `has_active_registration` instead.
     *
     * @var ?bool $nexusMet
     * @deprecated  field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('nexus_met')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $nexusMet = null;

    /**
     * Indicates if there is an active registration for the transaction.
     *
     * @var ?bool $hasActiveRegistration
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('has_active_registration')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?bool $hasActiveRegistration = null;

    /**
     * @param  \DateTime  $date
     * @param  string  $externalId
     * @param  CurrencyEnum  $currency
     * @param  array<TransactionItemEstimateResponse>  $transactionItems
     * @param  array<TransactionEstimateResponseAddress>  $addresses
     * @param  ?string  $totalAmount
     * @param  ?string  $description
     * @param  ?SourceEnum  $source
     * @param  ?bool  $marketplace
     * @param  ?CustomerBase  $customer
     * @param  ?string  $totalTaxAmountCalculated
     * @param  ?string  $taxableAmount
     * @param  ?string  $taxRateCalculated
     * @param  ?bool  $nexusMet
     * @param  ?bool  $hasActiveRegistration
     * @phpstan-pure
     */
    public function __construct(\DateTime $date, string $externalId, CurrencyEnum $currency, array $transactionItems, array $addresses, ?string $description = null, ?SourceEnum $source = null, ?CustomerBase $customer = null, ?string $totalAmount = '0.0', ?bool $marketplace = false, ?string $totalTaxAmountCalculated = '0.00', ?string $taxableAmount = '0.00', ?string $taxRateCalculated = '0.00', ?bool $nexusMet = false, ?bool $hasActiveRegistration = false)
    {
        $this->date = $date;
        $this->externalId = $externalId;
        $this->currency = $currency;
        $this->transactionItems = $transactionItems;
        $this->addresses = $addresses;
        $this->description = $description;
        $this->source = $source;
        $this->customer = $customer;
        $this->totalAmount = $totalAmount;
        $this->marketplace = $marketplace;
        $this->totalTaxAmountCalculated = $totalTaxAmountCalculated;
        $this->taxableAmount = $taxableAmount;
        $this->taxRateCalculated = $taxRateCalculated;
        $this->nexusMet = $nexusMet;
        $this->hasActiveRegistration = $hasActiveRegistration;
    }
}